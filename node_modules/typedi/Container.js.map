{"version":3,"sources":["../../src/Container.ts"],"names":[],"mappings":";;AAGA,iCAA8B;AAE9B,qEAAkE;AAElE;;GAEG;AACH;IAAA;IA6OA,CAAC;IA7NG,4EAA4E;IAC5E,wBAAwB;IACxB,4EAA4E;IAE5E;;OAEG;IACI,yBAAe,GAAtB,UAAuB,OAAgB;QACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACI,yBAAe,GAAtB,UAA6C,UAAiC;QAC1E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnC,CAAC;IAoBD;;;OAGG;IACI,aAAG,GAAV,UAAc,UAA6B;QAEvC,yCAAyC;QACzC,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAE3C,8FAA8F;QAC9F,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC;YAC5B,MAAM,CAAC,OAAO,CAAC,QAAa,CAAC;QAEjC,mHAAmH;QACnH,sEAAsE;QACtE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAC3B,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YAC9B,CAAC,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,YAAY,aAAK,CAAC,CAAC;YAChE,MAAM,IAAI,2CAAoB,CAAC,UAAU,CAAC,CAAC;QAE/C,8FAA8F;QAC9F,IAAM,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,UAAsB,CAAC;QAE7E,iEAAiE;QACjE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,OAAO,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,+DAA+D;QAC/D,IAAM,UAAU,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,GAAI,OAAe,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC;QACjI,IAAI,MAAM,GAAU,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC;QAE9E,2DAA2D;QAC3D,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAElB,qEAAqE;YACrE,4FAA4F;YAC5F,oFAAoF;YACpF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,KAAK,SAAS,EAAnB,CAAmB,CAAC,CAAC;YAErD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,YAAY,KAAK,CAAC,CAAC,CAAC;gBACnC,gEAAgE;gBAChE,oGAAoG;gBACpG,OAAO,CAAC,QAAQ,GAAG,CAAA,KAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAS,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAI,MAAM,CAAC,CAAC;YAE5F,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,OAAf,OAAO,EAAY,MAAM,CAAC,CAAC;YAClD,CAAC;QAEL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC;QAC7D,CAAC;QAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC,QAAa,CAAC;;IACjC,CAAC;IAiBD;;OAEG;IACI,aAAG,GAAV,UAAW,UAA6B,EAAE,KAAU;QAChD,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;QAE7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,SAAO,GAA8B;gBACvC,QAAQ,EAAE,KAAK;aAClB,CAAC;YACF,EAAE,CAAC,CAAC,UAAU,YAAY,aAAK,IAAI,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAChE,SAAO,CAAC,EAAE,GAAG,UAAU,CAAC;YAE5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAO,CAAC,IAAI,GAAG,UAAU,CAAC;YAC9B,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAO,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,iBAAO,GAAd,UAAe,MAA+C;QAA9D,iBAEC;QADG,MAAM,CAAC,OAAO,CAAC,UAAC,CAAM,IAAK,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,gBAAM,GAAb;QAAA,iBAMC;QANa,aAA2B;aAA3B,UAA2B,EAA3B,qBAA2B,EAA3B,IAA2B;YAA3B,wBAA2B;;QACrC,GAAG,CAAC,OAAO,CAAC,UAAA,EAAE;YACV,IAAM,OAAO,GAAG,KAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,OAAO,CAAC;gBACR,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,eAAK,GAAZ;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,4EAA4E;IAC5E,yBAAyB;IACzB,4EAA4E;IAE5E;;OAEG;IACY,qBAAW,GAA1B,UAA2B,UAA6B;QACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO;YAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;gBACX,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,UAAU,CAAC;YAErC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,UAAU,YAAY,QAAQ,CAAC;gBAC/C,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU,IAAI,UAAU,CAAC,SAAS,YAAY,OAAO,CAAC,IAAI,CAAC;YAEvF,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACY,0BAAgB,GAA/B,UAAgC,IAAc,EAAE,UAAiB;QAAjE,iBAWC;QAVG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS,EAAE,KAAK;YACnC,IAAM,YAAY,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAlD,CAAkD,CAAC,CAAC;YACvG,EAAE,CAAC,CAAC,YAAY,CAAC;gBACb,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YAEhC,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACrE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEpC,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACY,yBAAe,GAA9B,UAA+B,KAAa;QACxC,MAAM,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACzF,CAAC;IAED;;OAEG;IACY,+BAAqB,GAApC,UAAqC,MAAgB;QACjD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;YACzB,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC;YAC1B,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,KAAK,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,YAAY,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACnG,MAAM,CAAC;YAEX,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,YAAY,EAAE;gBACxD,UAAU,EAAE,IAAI;gBAChB,QAAQ,EAAE,IAAI;gBACd,YAAY,EAAE,IAAI;gBAClB,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE;aACzB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,gBAAC;AAAD,CA7OA,AA6OC;AA3OG,4EAA4E;AAC5E,4BAA4B;AAC5B,4EAA4E;AAE5E;;GAEG;AACY,kBAAQ,GAAgC,EAAE,CAAC;AAE1D;;GAEG;AACY,kBAAQ,GAAc,EAAE,CAAC;AAd/B,8BAAS","file":"Container.js","sourcesContent":["import {ServiceMetadata} from \"./types/ServiceMetadata\";\nimport {ObjectType} from \"./types/ObjectType\";\nimport {Handler} from \"./types/Handler\";\nimport {Token} from \"./Token\";\nimport {ServiceIdentifier} from \"./types/ServiceIdentifier\";\nimport {ServiceNotFoundError} from \"./error/ServiceNotFoundError\";\n\n/**\n * Service container.\n */\nexport class Container {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * All registered services.\n     */\n    private static services: ServiceMetadata<any, any>[] = [];\n\n    /**\n     * All registered handlers.\n     */\n    private static handlers: Handler[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Registers a new handler.\n     */\n    static registerHandler(handler: Handler) {\n        this.handlers.push(handler);\n    }\n\n    /**\n     * Registers a new service.\n     */\n    static registerService<T, K extends keyof T>(descriptor: ServiceMetadata<T, K>) {\n        this.services.push(descriptor);\n    }\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(type: ObjectType<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: string): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: Token<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(identifier: ServiceIdentifier): T {\n\n        // find if service already was registered\n        let service = this.findService(identifier);\n\n        // find if instance of this object already initialized in the container and return it if it is\n        if (service && service.instance)\n            return service.instance as T;\n\n        // if named service was requested and its instance was not found plus there is not type to know what to initialize,\n        // this means service was not pre-registered and we throw an exception\n        if ((!service || !service.type) &&\n            (!service || !service.factory) &&\n            (typeof identifier === \"string\" || identifier instanceof Token))\n            throw new ServiceNotFoundError(identifier);\n\n        // at this point we either have type in service registered, either identifier is a target type\n        const type = service && service.type ? service.type : identifier as Function;\n\n        // if service was not found then create a new one and register it\n        if (!service) {\n            service = { type: type };\n            this.services.push(service);\n        }\n\n        // setup constructor parameters for a newly initialized service\n        const paramTypes = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:paramtypes\", type) : undefined;\n        let params: any[] = paramTypes ? this.initializeParams(type, paramTypes) : [];\n\n        // if factory is set then use it to create service instance\n        if (service.factory) {\n\n            // filter out non-service parameters from created service constructor\n            // non-service parameters can be, lets say Car(name: string, isNew: boolean, engine: Engine)\n            // where name and isNew are non-service parameters and engine is a service parameter\n            params = params.filter(param => param !== undefined);\n\n            if (service.factory instanceof Array) {\n                // use special [Type, \"create\"] syntax to allow factory services\n                // in this case Type instance will be obtained from Container and its method \"create\" will be called\n                service.instance = (this.get(service.factory[0]) as any)[service.factory[1]](...params);\n\n            } else { // regular factory function\n                service.instance = service.factory(...params);\n            }\n\n        } else {  // otherwise simply create a new object instance\n            params.unshift(null);\n            service.instance = new (type.bind.apply(type, params))();\n        }\n\n        this.applyPropertyHandlers(type);\n        return service.instance as T;\n    }\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(type: Function, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(name: string, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(token: Token<any>, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(identifier: ServiceIdentifier, value: any): Container {\n        const service = this.findService(identifier);\n        if (service) {\n            service.instance = value;\n\n        } else {\n            const service: ServiceMetadata<any, any> = {\n                instance: value\n            };\n            if (identifier instanceof Token || typeof identifier === \"string\") {\n                service.id = identifier;\n\n            } else {\n                service.type = identifier;\n            }\n\n            this.services.push(service);\n        }\n\n        return this;\n    }\n\n    /**\n     * Provides a set of values to be saved in the container.\n     */\n    static provide(values: { id: ServiceIdentifier, value: any }[]) {\n        values.forEach((v: any) => this.set(v.id, v.value));\n    }\n\n    /**\n     * Removes services with a given service identifiers (tokens or types).\n     */\n    static remove(...ids: ServiceIdentifier[]) {\n        ids.forEach(id => {\n            const service = this.findService(id);\n            if (service)\n                this.services.splice(this.services.indexOf(service), 1);\n        });\n    }\n\n    /**\n     * Completely resets the container by removing all previously registered services and handlers from it.\n     */\n    static reset() {\n        this.handlers = [];\n        this.services = [];\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds registered service in the with a given service identifier.\n     */\n    private static findService(identifier: ServiceIdentifier): ServiceMetadata<any, any>|undefined {\n        return this.services.find(service => {\n            if (service.id)\n                return service.id === identifier;\n\n            if (service.type && identifier instanceof Function)\n                return service.type === identifier || identifier.prototype instanceof service.type;\n\n            return false;\n        });\n    }\n\n    /**\n     * Initializes all parameter types for a given target service class.\n     */\n    private static initializeParams(type: Function, paramTypes: any[]): any[] {\n        return paramTypes.map((paramType, index) => {\n            const paramHandler = this.handlers.find(handler => handler.object === type && handler.index === index);\n            if (paramHandler)\n                return paramHandler.value();\n\n            if (paramType && paramType.name && !this.isTypePrimitive(paramType.name))\n                return Container.get(paramType);\n\n            return undefined;\n        });\n    }\n\n    /**\n     * Checks if given type is primitive (e.g. string, boolean, number, object).\n     */\n    private static isTypePrimitive(param: string): boolean {\n        return [\"string\", \"boolean\", \"number\", \"object\"].indexOf(param.toLowerCase()) !== -1;\n    }\n\n    /**\n     * Applies all registered handlers on a given target class.\n     */\n    private static applyPropertyHandlers(target: Function) {\n        this.handlers.forEach(handler => {\n            if (handler.index) return;\n            if (handler.object.constructor !== target && !(target.prototype instanceof handler.object.constructor))\n                return;\n\n            Object.defineProperty(handler.object, handler.propertyName, {\n                enumerable: true,\n                writable: true,\n                configurable: true,\n                value: handler.value()\n            });\n        });\n    }\n\n}\n"],"sourceRoot":"."}