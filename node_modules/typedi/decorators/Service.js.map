{"version":3,"sources":["../../src/decorators/Service.ts"],"names":[],"mappings":";;AACA,0CAAuC;AAEvC,kCAA+B;AAsB/B;;GAEG;AACH,iBAA8C,oBAA6D;IACvG,MAAM,CAAC,UAAS,MAAgB;QAE5B,IAAM,OAAO,GAA0B;YACnC,IAAI,EAAE,MAAM;SACf,CAAC;QAEF,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,IAAI,oBAAoB,YAAY,aAAK,CAAC,CAAC,CAAC;YACpF,OAAO,CAAC,EAAE,GAAG,oBAAoB,CAAC;QAEtC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC9B,OAAO,CAAC,EAAE,GAAI,oBAA6C,CAAC,EAAE,CAAC;YAC/D,OAAO,CAAC,OAAO,GAAI,oBAA6C,CAAC,OAAO,CAAC;QAC7E,CAAC;QAED,qBAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC,CAAC;AACN,CAAC;AAjBD,0BAiBC","file":"Service.js","sourcesContent":["import {ServiceMetadata} from \"../types/ServiceMetadata\";\nimport {Container} from \"../Container\";\nimport {ServiceOptions} from \"../types/ServiceOptions\";\nimport {Token} from \"../Token\";\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(name: string): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(token: Token<any>): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service<T, K extends keyof T>(options?: ServiceOptions<T, K>): Function;\n\n/**\n * Marks class as a service that can be injected using container.\n */\nexport function Service<T, K extends keyof T>(optionsOrServiceName?: ServiceOptions<T, K>|Token<any>|string): Function {\n    return function(target: Function) {\n\n        const service: ServiceMetadata<T, K> = {\n            type: target\n        };\n\n        if (typeof optionsOrServiceName === \"string\" || optionsOrServiceName instanceof Token) {\n            service.id = optionsOrServiceName;\n\n        } else if (optionsOrServiceName) { // ServiceOptions\n            service.id = (optionsOrServiceName as ServiceOptions<T, K>).id;\n            service.factory = (optionsOrServiceName as ServiceOptions<T, K>).factory;\n        }\n\n        Container.registerService(service);\n    };\n}\n"],"sourceRoot":".."}